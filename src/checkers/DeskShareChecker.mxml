<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" width="400" height="300" creationComplete="onCreationComplete()">
	
	<mx:Script>
		<![CDATA[
			import connectors.DeskShareConnector;
			
			import mx.core.UIComponent;
			
			import util.Requirements;
			
			private var deskshareConnector:DeskShareConnector;
			private var ns:NetStream;
			private var video:Video;
			private var videoHolder:UIComponent;
			
			private function onCreationComplete():void{
				deskshareConnector = new DeskShareConnector(appletStarted, startViewing, stopViewing);
			}
			
			/**
			 * Call only if the Java check passed. Otherwise launching the applet definitely won't work.
			 */
			public function startTheApplet():void{
				ExternalInterface.call("startApplet", getCaptureServerUri(), DeskShareConnector.TEST_ROOM, true);
			}
			
			private function appletStarted(videoWidth:Number, videoHeight:Number):void{
				startVideo(deskshareConnector.nc, DeskShareConnector.TEST_ROOM, videoWidth, videoHeight);
			}
			
			private function startViewing(videoWidth:Number, videoHeight:Number):void{
				startVideo(deskshareConnector.nc, DeskShareConnector.TEST_ROOM, videoWidth, videoHeight);
			}
			
			private function stopViewing():void{
				ns.close();	
			}
			
			private function startVideo(connection:NetConnection, stream:String, videoWidth:Number, videoHeight:Number):void{	
				ns = new NetStream(connection);
				ns.addEventListener( NetStatusEvent.NET_STATUS, onNetStatus );
				ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, onAsyncError);
				ns.client = this;
				ns.bufferTime = 0;
				ns.receiveVideo(true);
				ns.receiveAudio(false);
				video = new Video(videoWidth, videoHeight);
				video.attachNetStream(ns);
				
				this.width = this.height * (videoWidth/videoHeight);
				
				videoHolder = new UIComponent();
				calculateDisplayDimensions(video, videoHolder);
				videoHolder.addChild(video);	
				//videoHolder.addChild(cursor);	
				//videoHolder.addChild(cursorImg);
				centerVideo();
				ns.play(stream);	
				this.addChild(videoHolder);		
			}
			
			private function onAsyncError(e:AsyncErrorEvent):void{
				trace("VIdeoWindow::asyncerror " + e.toString());
			}
			
			private function onNetStatus(e:NetStatusEvent):void{
				switch(e.info.code){
					case "NetStream.Play.Start":
						trace("NetStream.Publish.Start for deskshare broadcast test stream ");
						trace("Dispatching start viewing event");
						deskshareConnector.sendStartedViewingNotification();
						break;
					case "NetStream.Play.UnpublishNotify":
						trace("NetStream.Play.UnpublishNotify for deskshare broadcast test stream ");
						stopViewing();
						break;
				}
			}
			
			private function centerVideo():void {
				videoHolder.x = this.width/2 - video.width/2;
				videoHolder.y = this.height/2 - video.height/2;				
			}
			
			private function calculateDisplayDimensions(video:Video, videoHolder:UIComponent):void {
				if (videoIsSmallerThanDisplay(video, videoHolder)) {
					videoHolder.width = video.width;
					videoHolder.height = video.height;
					return;
				}
				
				if (this.width < this.height) {
					fitToWidthAndAdjustHeightToMaintainAspectRatio();				
				} else {
					fitToHeightAndAdjustWidthToMaintainAspectRatio();
				}
			}
			
			private function videoIsSmallerThanDisplay(video:Video, videoHolder:UIComponent):Boolean {
				return (video.height < this.height) && (video.width < this.width);
			}
			
			private function fitToWidthAndAdjustHeightToMaintainAspectRatio():void {	
				var aspectRatio:Number = video.height/video.width;			
				video.width = this.width;
				videoHolder.width = this.height;
				// Maintain aspect-ratio
				video.height = this.width * aspectRatio;
				videoHolder.height = video.height;				
			}
			
			private function fitToHeightAndAdjustWidthToMaintainAspectRatio():void {
				var aspectRatio:Number = video.width/video.height;					
				video.height = this.height;
				videoHolder.height = video.height;
				// Maintain aspect-ratio
				video.width = aspectRatio * this.height;
				videoHolder.width = video.width;				
			}	
			
			public function getCaptureServerUri():String{
				var uri:String = Requirements.bbb_deskshare_url;
				uri = uri.split("/")[2];
				return uri;
			}
		]]>
	</mx:Script>
	
</mx:VBox>
